?seq
?foreach
library("foreach")
?foreach
library(swirl)
swirl()
dim(my_vector) <- c(4,5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my)
class(my_vector)
my_matrix <- my_vector
?matrix
my
my_matrix2 <- matrix(1:20, 4, 5)
identical(my_matrix, my_matrix2)
patients <- c("Bill","Gina","Kelly","Sean")
cbind(patients, my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
cnames <- c("patient","age","weight","bp","rating,"test")
cnames <- c("patient","age","weight","bp","rating","test")
colnames(my_data) <- cnames
my_data
T==T
T == T
TRUE == TRUE
(FALSE == TRUE) == FALSE
6 == 7
6<7
10 <= 10
5!=7
skip()
FALSE & FALSE
TRUE & C(TRUE, FALSE, FALSE)
TRUE & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5 > 8 || 6 != 8 && 4> 3.9
isTRUE(6>4)
identical('twins','twins')
xor(5==6, !FALSE)
ints <- sample(10)
ints
ints >5
bye()
q()
?runif
runif()
?sapply
ch <- numeric(6)
length(ch)
ch [2>1] <- 1
ch
ch[i & 2>1] <- 2
ch[1 & 2>1] <- 2
ch
getwd()
a <- matrix (1:9,3,3)
a
solve(a)
inv(a)
attributes(a)
solve(a)
u[3,3]
a <- matrix (1:9,nrow=3,ncol=3)
a
solve(diag())
solve(diag(4))
solve(diag())
solve(diag(4))
a<-diag(4)
attributes(a)
a <- matrix (1:9,nrow=3,ncol=3)
attributes(a)
a
is.matrix()
is.matrix(a)
n <- 100set.seed(1)x <- runif(n, -2, 2)y0 <- x^3epsilon <- rnorm(n, 0, .1)y <- y0 + epsilongrnn <- learn(data.frame(y,x))grnn <- smooth(grnn, sigma=0.1)guess(grnn, -2)
n <- 100
set.seed(1)
x <- runif(n, -2, 2)
y0 <- x^3
epsilon <- rnorm(n, 0, .1)
y <- y0 + epsilon
grnn <- learn(data.frame(y,x))
library("grnn")
grnn <- learn(data.frame(y,x))
grnn <- smooth(grnn, sigma=0.1)
guess(grnn, -2)
grnn <- smooth(grnn, sigma=0.3)
guess(grnn, -2)
grnn <- smooth(grnn, sigma=0.05)
guess(grnn, -2)
grnn <- smooth(grnn, sigma=0.005)
guess(grnn, -2)
grnn <- smooth(grnn, sigma=0.0005)
guess(grnn, -2)
grnn <- smooth(grnn, sigma=0.001)
guess(grnn, -2)
grnn <- smooth(grnn, sigma=0.005)
guess(grnn, -2)
guess(grnn, -3)
guess(grnn, -2)
guess(grnn, -1)
guess(grnn, 1)
attributes(grnn)
grnn$sigma
x <- c(runif(n, -2, 2), runif(n,-2,2))
x
x <- runif(n, -2, 2)
z <- runif(n, -1, 3)
grnn <- learn(data.frame(y,x,z))
grnn <- smooth(grnn, sigma=0.1)
grnn$sigma
guess(grnn, 0)
guess(grnn, 0,5)
guess(grnn, c(0,5))
grnn <- learn(data.frame(y,x,z))
grnn <- smooth(grnn, sigma=c(0.1,0.2))
guess(grnn, c(0,5))
q()
rm(list=ls())
setwd("~/GitHub/Rgrnn")
source("R/kernel.R")
source("R/create.R")
source("R/smooth.R")
library("datasets")
dat <- beaver1
head(dat)
class(dat)
charCol <- rep ("abc",54)
charCol
ncol(dat)
nrow(dat)
charCol <- rep ("abc",114)
cbind(dat,charCol)
dat <- cbind(dat,charCol)
head(dat)
dat[2,3] <- "NULL"
dat[4,2] <- NA
head(dat)
matr <- as.matrix(dat)
head(matr)
matr <- data.matrix(dat)
head(matr)
dat[5,2] = "bcd"
matr <- data.matrix(dat)
head(matr)
source("R/create.R")
nn <- create.Rgrnn(dat,outColumn = 3)
source("R/create.R")
nn <- create.Rgrnn(dat,outColumn = 3)
matr <- data.matrix(dat)
matr <- invisible(data.matrix(dat))
source("R/create.R")
nn <- create.Rgrnn(dat,outColumn = 3)
sigma
sigma <- 1:10
attributes(sigma[1])
sigma[2]
source("R/create.R")
source("R/create.R")
source("R/create.R")
source("R/create.R")
source("R/create.R")
create(as.matrix(1:20,4))
create.Rgrnn(as.matrix(1:20,4))
source("R/create.R")
create.Rgrnn(as.matrix(1:20,4))
source("R/create.R")
create.Rgrnn(as.matrix(1:20,4))
source("R/create.R")
create.Rgrnn(as.matrix(1:20,4))
source("R/create.R")
create.Rgrnn(as.matrix(1:20,4))
source("R/create.R")
create.Rgrnn(as.matrix(1:20,4))
source("R/create.R")
create.Rgrnn(as.matrix(1:20,4))
source("R/create.R")
create.Rgrnn(as.matrix(1:20,4))
source("R/create.R")
create.Rgrnn(as.matrix(1:20,4))
source("R/create.R")
create.Rgrnn(as.matrix(1:20,4))
nn <- create.Rgrnn(as.matrix(1:20,4))
nn$sigma
sigma = rep(0.2, ncol(set)-1)
set <- 1:20
sigma = rep(0.2, ncol(set)-1)
set <- matrix(1:20,4)
sigma = rep(0.2, ncol(set)-1)
sigma
source("R/create.R")
nn <- create.Rgrnn(as.matrix(1:20,4))
source("R/create.R")
nn <- create.Rgrnn(as.matrix(1:20,4))
nn
source("R/create.R")
nn <- create.Rgrnn(as.matrix(1:20,4))
nn
source("R/create.R")
nn <- create.Rgrnn(as.matrix(1:20,4))
lst <- list(a=1:4, b=rep('k', 5), c=3)
lst
create.Rgrnn <- function(set, sigma, outColumn = 1, changeColNames = F)
# @arguments:
#set     	data.frame or matrix
#sigma 		numeric vector (optional)
#outColumn 	scalar numeric
{
if (missing(set)) 		stop("Set is missing!")
if (!is.matrix(set)) 	print("All non-numeric data in set will be automaticly coercied")
if (missing (sigma)) 	sigma = rep(0.2, ncol(set)-1)
if (length(sigma) != ncol(set)-1)
stop("sigma length doesn't match input amount")
grnn <- list(
model	= "General regression neural network (multidimentional)",
set 	= data.matrix(set),
sigma 	= sigma,
outColumn = outColumn,
layer1weights = numeric(), #dim=dim(set)-1
layer2weights = numeric() #dim=dim(set)-1
)
grnn$sigma <- sigma
#setting start weights as 1
grnn$layer1weights <- rep(1,ncol(set)-1)
grnn$layer2weights <- rep(1,ncol(set)-1)
if (changeColNames ) colnames(grnn$set)[outColumn] <- "out"
grnn
}
nn <- create.Rgrnn(as.matrix(1:20,4))
nn
